{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { createOperatorSubscriber } from '../../operators/OperatorSubscriber';\nimport { Observable } from '../../Observable';\nimport { innerFrom } from '../../observable/innerFrom';\nexport function fromFetch(input, initWithSelector) {\n  if (initWithSelector === void 0) {\n    initWithSelector = {};\n  }\n\n  var selector = initWithSelector.selector,\n      init = __rest(initWithSelector, [\"selector\"]);\n\n  return new Observable(function (subscriber) {\n    var controller = new AbortController();\n    var signal = controller.signal;\n    var abortable = true;\n    var outerSignal = init.signal;\n\n    if (outerSignal) {\n      if (outerSignal.aborted) {\n        controller.abort();\n      } else {\n        var outerSignalHandler_1 = function () {\n          if (!signal.aborted) {\n            controller.abort();\n          }\n        };\n\n        outerSignal.addEventListener('abort', outerSignalHandler_1);\n        subscriber.add(function () {\n          return outerSignal.removeEventListener('abort', outerSignalHandler_1);\n        });\n      }\n    }\n\n    var perSubscriberInit = __assign(__assign({}, init), {\n      signal: signal\n    });\n\n    var handleError = function (err) {\n      abortable = false;\n      subscriber.error(err);\n    };\n\n    fetch(input, perSubscriberInit).then(function (response) {\n      if (selector) {\n        innerFrom(selector(response)).subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n          abortable = false;\n          subscriber.complete();\n        }, handleError));\n      } else {\n        abortable = false;\n        subscriber.next(response);\n        subscriber.complete();\n      }\n    }).catch(handleError);\n    return function () {\n      if (abortable) {\n        controller.abort();\n      }\n    };\n  });\n}","map":{"version":3,"sources":["../../../../../src/internal/observable/dom/fetch.ts"],"names":[],"mappings":";AAAA,SAAS,wBAAT,QAAyC,oCAAzC;AACA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,SAAT,QAA0B,4BAA1B;AA4FA,OAAM,SAAU,SAAV,CACJ,KADI,EAEJ,gBAFI,EAIE;AAFN,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,EAAA;AAEM;;AAEE,MAAA,QAAQ,GAAc,gBAAgB,CAA9B,QAAR;AAAA,MAAa,IAAI,GAAA,MAAA,CAAK,gBAAL,EAAnB,CAAA,UAAA,CAAmB,CAAjB;;AACR,SAAO,IAAI,UAAJ,CAA6B,UAAC,UAAD,EAAW;AAK7C,QAAM,UAAU,GAAG,IAAI,eAAJ,EAAnB;AACQ,QAAA,MAAM,GAAK,UAAU,CAAf,MAAN;AAKR,QAAI,SAAS,GAAG,IAAhB;AAKQ,QAAQ,WAAW,GAAK,IAAI,CAAT,MAAnB;;AACR,QAAI,WAAJ,EAAiB;AACf,UAAI,WAAW,CAAC,OAAhB,EAAyB;AACvB,QAAA,UAAU,CAAC,KAAX;AACD,OAFD,MAEO;AAGL,YAAM,oBAAkB,GAAG,YAAA;AACzB,cAAI,CAAC,MAAM,CAAC,OAAZ,EAAqB;AACnB,YAAA,UAAU,CAAC,KAAX;AACD;AACF,SAJD;;AAKA,QAAA,WAAW,CAAC,gBAAZ,CAA6B,OAA7B,EAAsC,oBAAtC;AACA,QAAA,UAAU,CAAC,GAAX,CAAe,YAAA;AAAM,iBAAA,WAAW,CAAC,mBAAZ,CAAgC,OAAhC,EAAA,oBAAA,CAAA;AAA4D,SAAjF;AACD;AACF;;AAOD,QAAM,iBAAiB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAqB,IAArB,CAAA,EAAyB;AAAE,MAAA,MAAM,EAAA;AAAR,KAAzB,CAAvB;;AAEA,QAAM,WAAW,GAAG,UAAC,GAAD,EAAS;AAC3B,MAAA,SAAS,GAAG,KAAZ;AACA,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD,KAHD;;AAKA,IAAA,KAAK,CAAC,KAAD,EAAQ,iBAAR,CAAL,CACG,IADH,CACQ,UAAC,QAAD,EAAS;AACb,UAAI,QAAJ,EAAc;AAIZ,QAAA,SAAS,CAAC,QAAQ,CAAC,QAAD,CAAT,CAAT,CAA8B,SAA9B,CACE,wBAAwB,CACtB,UADsB,EAGtB,SAHsB,EAKtB,YAAA;AACE,UAAA,SAAS,GAAG,KAAZ;AACA,UAAA,UAAU,CAAC,QAAX;AACD,SARqB,EAStB,WATsB,CAD1B;AAaD,OAjBD,MAiBO;AACL,QAAA,SAAS,GAAG,KAAZ;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,QAAhB;AACA,QAAA,UAAU,CAAC,QAAX;AACD;AACF,KAxBH,EAyBG,KAzBH,CAyBS,WAzBT;AA2BA,WAAO,YAAA;AACL,UAAI,SAAJ,EAAe;AACb,QAAA,UAAU,CAAC,KAAX;AACD;AACF,KAJD;AAKD,GA7EM,CAAP;AA8ED","sourceRoot":"","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { createOperatorSubscriber } from '../../operators/OperatorSubscriber';\nimport { Observable } from '../../Observable';\nimport { innerFrom } from '../../observable/innerFrom';\nexport function fromFetch(input, initWithSelector) {\n    if (initWithSelector === void 0) { initWithSelector = {}; }\n    var selector = initWithSelector.selector, init = __rest(initWithSelector, [\"selector\"]);\n    return new Observable(function (subscriber) {\n        var controller = new AbortController();\n        var signal = controller.signal;\n        var abortable = true;\n        var outerSignal = init.signal;\n        if (outerSignal) {\n            if (outerSignal.aborted) {\n                controller.abort();\n            }\n            else {\n                var outerSignalHandler_1 = function () {\n                    if (!signal.aborted) {\n                        controller.abort();\n                    }\n                };\n                outerSignal.addEventListener('abort', outerSignalHandler_1);\n                subscriber.add(function () { return outerSignal.removeEventListener('abort', outerSignalHandler_1); });\n            }\n        }\n        var perSubscriberInit = __assign(__assign({}, init), { signal: signal });\n        var handleError = function (err) {\n            abortable = false;\n            subscriber.error(err);\n        };\n        fetch(input, perSubscriberInit)\n            .then(function (response) {\n            if (selector) {\n                innerFrom(selector(response)).subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n                    abortable = false;\n                    subscriber.complete();\n                }, handleError));\n            }\n            else {\n                abortable = false;\n                subscriber.next(response);\n                subscriber.complete();\n            }\n        })\n            .catch(handleError);\n        return function () {\n            if (abortable) {\n                controller.abort();\n            }\n        };\n    });\n}\n//# sourceMappingURL=fetch.js.map"]},"metadata":{},"sourceType":"module"}