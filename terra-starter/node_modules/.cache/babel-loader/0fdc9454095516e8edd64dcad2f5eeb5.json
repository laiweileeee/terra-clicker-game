{"ast":null,"code":"var _jsxFileName = \"/Users/laiwei/Desktop/Code/learn-terra/clicker-portal/terra-starter/src/Pages/leaderboard.js\",\n    _s = $RefreshSig$();\n\nimport * as query from \"../contract/query\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Leaderboard = () => {\n  _s();\n\n  const connectedWallet = useConnectedWallet();\n  const [scores, setScores] = useState();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchScores = async () => {\n      if (connectedWallet && connectedWallet.network.name === \"testnet\") {\n        // We're returning instead of logging\n        return (await query.getScores(connectedWallet)).scores;\n      }\n    };\n\n    fetchScores().then(scores => {\n      // We're going to add a stateful variable to store scores\n      setScores(scores);\n    }); // We want to only run this only when the wallet is loaded\n  }, [connectedWallet]);\n\n  const renderScores = scores => {\n    {\n      /* If the game has never been played :(*/\n    }\n\n    if (!scores || scores.length < 1) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" No scores available :( \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }, this);\n    } // Load the scores from the stateful React variable as they're updated\n\n\n    return scores.map((score, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [score[0].slice(0, 5) + \"...\" + score[0].slice(-4), \":\", \" \", score[1].toString().padStart(2, \"0\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Leaderboard, \"tpJEYuPNj9PeCF7lWBjZ+Gok4L8=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = Leaderboard;\nexport default Leaderboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"sources":["/Users/laiwei/Desktop/Code/learn-terra/clicker-portal/terra-starter/src/Pages/leaderboard.js"],"names":["query","useConnectedWallet","useEffect","useState","Leaderboard","connectedWallet","scores","setScores","loading","setLoading","fetchScores","network","name","getScores","then","renderScores","length","map","score","index","slice","toString","padStart"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,mBAAvB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,eAAe,GAAGJ,kBAAkB,EAA1C;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,EAApC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,WAAW,GAAG,YAAY;AAC9B,UAAIL,eAAe,IAAIA,eAAe,CAACM,OAAhB,CAAwBC,IAAxB,KAAiC,SAAxD,EAAmE;AACjE;AACA,eAAO,CAAC,MAAMZ,KAAK,CAACa,SAAN,CAAgBR,eAAhB,CAAP,EAAyCC,MAAhD;AACD;AACF,KALD;;AAOAI,IAAAA,WAAW,GAAGI,IAAd,CAAoBR,MAAD,IAAY;AAC7B;AACAC,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KAHD,EARc,CAYd;AACD,GAbQ,EAaN,CAACD,eAAD,CAbM,CAAT;;AAeA,QAAMU,YAAY,GAAIT,MAAD,IAAY;AAC/B;AACE;AACD;;AACD,QAAI,CAACA,MAAD,IAAWA,MAAM,CAACU,MAAP,GAAgB,CAA/B,EAAkC;AAChC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAN8B,CAQ/B;;;AACA,WAAOV,MAAM,CAACW,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,0BACE;AAAiB,QAAA,SAAS,EAAC,OAA3B;AAAA,+BAGE;AAAA,qBACGD,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,CAAf,EAAkB,CAAlB,IAAuB,KAAvB,GAA+BF,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,CAAC,CAAhB,CADlC,OACuD,GADvD,EAEGF,KAAK,CAAC,CAAD,CAAL,CAASG,QAAT,GAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF,SAAUH,KAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAXM,CAAP;AAYD,GArBD;;AAuBA,sBAAO,qCAAP;AACD,CA5CD;;GAAMf,W;UACoBH,kB;;;KADpBG,W;AA8CN,eAAeA,WAAf","sourcesContent":["import * as query from \"../contract/query\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect, useState } from \"react\";\n\nconst Leaderboard = () => {\n  const connectedWallet = useConnectedWallet();\n  const [scores, setScores] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchScores = async () => {\n      if (connectedWallet && connectedWallet.network.name === \"testnet\") {\n        // We're returning instead of logging\n        return (await query.getScores(connectedWallet)).scores;\n      }\n    };\n\n    fetchScores().then((scores) => {\n      // We're going to add a stateful variable to store scores\n      setScores(scores);\n    });\n    // We want to only run this only when the wallet is loaded\n  }, [connectedWallet]);\n\n  const renderScores = (scores) => {\n    {\n      /* If the game has never been played :(*/\n    }\n    if (!scores || scores.length < 1) {\n      return <div> No scores available :( </div>;\n    }\n\n    // Load the scores from the stateful React variable as they're updated\n    return scores.map((score, index) => {\n      return (\n        <div key={index} className=\"score\">\n          {/* Format is address: score */}\n          {/* Slice address to first 5 and last 4 digits so it looks like terra...a1b2*/}\n          <span>\n            {score[0].slice(0, 5) + \"...\" + score[0].slice(-4)}:{\" \"}\n            {score[1].toString().padStart(2, \"0\")}\n          </span>\n        </div>\n      );\n    });\n  };\n\n  return <></>;\n};\n\nexport default Leaderboard;\n"]},"metadata":{},"sourceType":"module"}