{"ast":null,"code":"import { WalletContext, WalletStatus } from '@terra-money/use-wallet';\nimport React, { useMemo } from 'react';\nexport function StaticWalletProvider(_ref) {\n  let {\n    children,\n    defaultNetwork,\n    status = WalletStatus.INITIALIZING,\n    availableConnectTypes = [],\n    availableInstallTypes = [],\n    availableConnections = [],\n    availableInstallations = [],\n    wallets = [],\n    supportFeatures = new Set(),\n    connection = undefined\n  } = _ref;\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      availableInstallations,\n      status,\n      network: defaultNetwork,\n      wallets,\n      supportFeatures,\n      connection,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      signBytes: () => {\n        throw new Error('not implemented!');\n      },\n      refetchStates: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n      hasCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      addCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      hasNetwork: () => {\n        throw new Error('not implemented!');\n      },\n      addNetwork: () => {\n        throw new Error('not implemented!');\n      }\n    };\n  }, [availableConnectTypes, availableInstallTypes, availableConnections, availableInstallations, status, defaultNetwork, wallets, supportFeatures, connection]);\n  return React.createElement(WalletContext.Provider, {\n    value: state\n  }, children);\n}","map":{"version":3,"sources":["../../../src/@terra-money/wallet-provider/StaticWalletProvider.tsx"],"names":[],"mappings":"AACA,SAME,aANF,EAQE,YARF,QASO,yBATP;AAUA,OAAO,KAAP,IAA2B,OAA3B,QAA0C,OAA1C;AAeA,OAAM,SAAU,oBAAV,OAWsB;AAAA,MAXS;AACnC,IAAA,QADmC;AAEnC,IAAA,cAFmC;AAGnC,IAAA,MAAM,GAAG,YAAY,CAAC,YAHa;AAInC,IAAA,qBAAqB,GAAG,EAJW;AAKnC,IAAA,qBAAqB,GAAG,EALW;AAMnC,IAAA,oBAAoB,GAAG,EANY;AAOnC,IAAA,sBAAsB,GAAG,EAPU;AAQnC,IAAA,OAAO,GAAG,EARyB;AASnC,IAAA,eAAe,GAAG,IAAI,GAAJ,EATiB;AAUnC,IAAA,UAAU,GAAG;AAVsB,GAWT;AAC1B,QAAM,KAAK,GAAG,OAAO,CAAS,MAAK;AACjC,WAAO;AACL,MAAA,qBADK;AAEL,MAAA,qBAFK;AAGL,MAAA,oBAHK;AAIL,MAAA,sBAJK;AAKL,MAAA,MALK;AAML,MAAA,OAAO,EAAE,cANJ;AAOL,MAAA,OAPK;AAQL,MAAA,eARK;AASL,MAAA,UATK;AAUL,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAZI;AAaL,MAAA,OAAO,EAAE,MAAK;AACZ,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAfI;AAgBL,MAAA,eAAe,EAAE,MAAK;AACpB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAlBI;AAmBL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OArBI;AAsBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAxBI;AAyBL,MAAA,IAAI,EAAE,MAAK;AACT,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA3BI;AA4BL,MAAA,SAAS,EAAE,MAAK;AACd,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA9BI;AA+BL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAjCI;AAkCL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OApCI;AAqCL,MAAA,kCAAkC,EAAE,MAAK;AACvC,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAvCI;AAwCL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA1CI;AA2CL,MAAA,aAAa,EAAE,MAAK;AAClB,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OA7CI;AA8CL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,OAhDI;AAiDL,MAAA,UAAU,EAAE,MAAK;AACf,cAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD;AAnDI,KAAP;AAqDD,GAtDoB,EAsDlB,CACD,qBADC,EAED,qBAFC,EAGD,oBAHC,EAID,sBAJC,EAKD,MALC,EAMD,cANC,EAOD,OAPC,EAQD,eARC,EASD,UATC,CAtDkB,CAArB;AAkEA,SACE,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAf,EAAuB;AAAC,IAAA,KAAK,EAAE;AAAR,GAAvB,EAAuC,QAAvC,CADF;AAGD","sourcesContent":["import { TerraWebExtensionFeatures } from '@terra-money/web-extension-interface';\nimport {\n  Connection,\n  ConnectType,\n  Installation,\n  NetworkInfo,\n  Wallet,\n  WalletContext,\n  WalletInfo,\n  WalletStatus,\n} from '@terra-money/use-wallet';\nimport React, { ReactNode, useMemo } from 'react';\n\nexport interface StaticWalletProviderProps {\n  children: ReactNode;\n  defaultNetwork: NetworkInfo;\n  status?: WalletStatus;\n  availableConnectTypes?: ConnectType[];\n  availableInstallTypes?: ConnectType[];\n  availableConnections?: Connection[];\n  availableInstallations?: Installation[];\n  wallets?: WalletInfo[];\n  supportFeatures?: Set<TerraWebExtensionFeatures>;\n  connection?: Connection | undefined;\n}\n\nexport function StaticWalletProvider({\n  children,\n  defaultNetwork,\n  status = WalletStatus.INITIALIZING,\n  availableConnectTypes = [],\n  availableInstallTypes = [],\n  availableConnections = [],\n  availableInstallations = [],\n  wallets = [],\n  supportFeatures = new Set(),\n  connection = undefined,\n}: StaticWalletProviderProps) {\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      availableInstallations,\n      status,\n      network: defaultNetwork,\n      wallets,\n      supportFeatures,\n      connection,\n      install: () => {\n        throw new Error('not implemented!');\n      },\n      connect: () => {\n        throw new Error('not implemented!');\n      },\n      connectReadonly: () => {\n        throw new Error('not implemented!');\n      },\n      disconnect: () => {\n        throw new Error('not implemented!');\n      },\n      post: () => {\n        throw new Error('not implemented!');\n      },\n      sign: () => {\n        throw new Error('not implemented!');\n      },\n      signBytes: () => {\n        throw new Error('not implemented!');\n      },\n      refetchStates: () => {\n        throw new Error('not implemented!');\n      },\n      recheckStatus: () => {\n        throw new Error('not implemented!');\n      },\n      isChromeExtensionCompatibleBrowser: () => {\n        throw new Error('not implemented!');\n      },\n      hasCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      addCW20Tokens: () => {\n        throw new Error('not implemented!');\n      },\n      hasNetwork: () => {\n        throw new Error('not implemented!');\n      },\n      addNetwork: () => {\n        throw new Error('not implemented!');\n      },\n    };\n  }, [\n    availableConnectTypes,\n    availableInstallTypes,\n    availableConnections,\n    availableInstallations,\n    status,\n    defaultNetwork,\n    wallets,\n    supportFeatures,\n    connection,\n  ]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}