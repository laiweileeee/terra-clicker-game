{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as query from \"../contract/query\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect, useState } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Leaderboard = () => {\n  _s();\n\n  const connectedWallet = useConnectedWallet();\n  const [scores, setScores] = useState();\n  useEffect(() => {\n    const fetchScores = async () => {\n      if (connectedWallet && connectedWallet.network.name === \"testnet\") {\n        // We're returning instead of logging\n        return (await query.getScores(connectedWallet)).scores;\n      }\n    };\n\n    fetchScores().then(scores => {\n      // We're going to add a stateful variable to store scores\n      setScores(scores);\n    }); // We want to only run this only when the wallet is loaded\n  }, [connectedWallet]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Leaderboard, \"7oMH+e7NzxcfYqBbQrsHaWwpDoQ=\", false, function () {\n  return [useConnectedWallet];\n});\n\n_c = Leaderboard;\nexport default Leaderboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"sources":["/Users/laiwei/Desktop/Code/learn-terra/clicker-portal/terra-starter/src/Pages/leaderboard.js"],"names":["query","useConnectedWallet","useEffect","useState","Leaderboard","connectedWallet","scores","setScores","fetchScores","network","name","getScores","then"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,mBAAvB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,eAAe,GAAGJ,kBAAkB,EAA1C;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,EAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,WAAW,GAAG,YAAY;AAC9B,UAAIH,eAAe,IAAIA,eAAe,CAACI,OAAhB,CAAwBC,IAAxB,KAAiC,SAAxD,EAAmE;AACjE;AACA,eAAO,CAAC,MAAMV,KAAK,CAACW,SAAN,CAAgBN,eAAhB,CAAP,EAAyCC,MAAhD;AACD;AACF,KALD;;AAOAE,IAAAA,WAAW,GAAGI,IAAd,CAAoBN,MAAD,IAAY;AAC7B;AACAC,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KAHD,EARc,CAYd;AACD,GAbQ,EAaN,CAACD,eAAD,CAbM,CAAT;AAeA,sBAAO,qCAAP;AACD,CApBD;;GAAMD,W;UACoBH,kB;;;KADpBG,W;AAsBN,eAAeA,WAAf","sourcesContent":["import * as query from \"../contract/query\";\nimport { useConnectedWallet } from \"@terra-money/wallet-provider\";\nimport { useEffect, useState } from \"react\";\n\nconst Leaderboard = () => {\n  const connectedWallet = useConnectedWallet();\n  const [scores, setScores] = useState();\n\n  useEffect(() => {\n    const fetchScores = async () => {\n      if (connectedWallet && connectedWallet.network.name === \"testnet\") {\n        // We're returning instead of logging\n        return (await query.getScores(connectedWallet)).scores;\n      }\n    };\n\n    fetchScores().then((scores) => {\n      // We're going to add a stateful variable to store scores\n      setScores(scores);\n    });\n    // We want to only run this only when the wallet is loaded\n  }, [connectedWallet]);\n\n  return <></>;\n};\n\nexport default Leaderboard;\n"]},"metadata":{},"sourceType":"module"}