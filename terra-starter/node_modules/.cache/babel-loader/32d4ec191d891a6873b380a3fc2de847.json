{"ast":null,"code":"import { LCDClient, MsgExecuteContract, Fee } from \"@terra-money/terra.js\";\nimport { contractAddress } from \"./address\"; // ==== utils ====\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst until = Date.now() + 1000 * 60 * 60;\nconst untilInterval = Date.now() + 1000 * 60;\n\nconst _exec = function (msg) {\n  let fee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Fee(200000, {\n    uluna: 10000\n  });\n  return async wallet => {\n    const lcd = new LCDClient({\n      URL: wallet.network.lcd,\n      chainID: wallet.network.chainID\n    });\n    const {\n      result\n    } = await wallet.post({\n      fee,\n      msgs: [new MsgExecuteContract(wallet.walletAddress, contractAddress(wallet), msg)]\n    });\n\n    while (true) {\n      try {\n        return await lcd.tx.txInfo(result.txhash);\n      } catch (e) {\n        if (Date.now() < untilInterval) {\n          await sleep(500);\n        } else if (Date.now() < until) {\n          await sleep(1000 * 10);\n        } else {\n          throw new Error(`Transaction queued. To verify the status, please check the transaction hash: ${result.txhash}`);\n        }\n      }\n    }\n  };\n}; // ==== execute contract ====\n// THIS IS ALL I ADDED!!!\n\n\nexport const setScore = async (wallet, score) => _exec({\n  upsert_score: {\n    score\n  }\n})(wallet);","map":{"version":3,"sources":["/Users/laiwei/Desktop/Code/learn-terra/clicker-portal/terra-starter/src/contract/execute.js"],"names":["LCDClient","MsgExecuteContract","Fee","contractAddress","sleep","ms","Promise","resolve","setTimeout","until","Date","now","untilInterval","_exec","msg","fee","uluna","wallet","lcd","URL","network","chainID","result","post","msgs","walletAddress","tx","txInfo","txhash","e","Error","setScore","score","upsert_score"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,kBAApB,EAAwCC,GAAxC,QAAmD,uBAAnD;AACA,SAASC,eAAT,QAAgC,WAAhC,C,CAEA;;AAEA,MAAMC,KAAK,GAAIC,EAAD,IAAQ,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAtB;;AACA,MAAMI,KAAK,GAAGC,IAAI,CAACC,GAAL,KAAa,OAAO,EAAP,GAAY,EAAvC;AACA,MAAMC,aAAa,GAAGF,IAAI,CAACC,GAAL,KAAa,OAAO,EAA1C;;AAEA,MAAME,KAAK,GACT,UAACC,GAAD;AAAA,MAAMC,GAAN,uEAAY,IAAIb,GAAJ,CAAQ,MAAR,EAAgB;AAAEc,IAAAA,KAAK,EAAE;AAAT,GAAhB,CAAZ;AAAA,SACA,MAAOC,MAAP,IAAkB;AAChB,UAAMC,GAAG,GAAG,IAAIlB,SAAJ,CAAc;AACxBmB,MAAAA,GAAG,EAAEF,MAAM,CAACG,OAAP,CAAeF,GADI;AAExBG,MAAAA,OAAO,EAAEJ,MAAM,CAACG,OAAP,CAAeC;AAFA,KAAd,CAAZ;AAKA,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAML,MAAM,CAACM,IAAP,CAAY;AACnCR,MAAAA,GADmC;AAEnCS,MAAAA,IAAI,EAAE,CACJ,IAAIvB,kBAAJ,CACEgB,MAAM,CAACQ,aADT,EAEEtB,eAAe,CAACc,MAAD,CAFjB,EAGEH,GAHF,CADI;AAF6B,KAAZ,CAAzB;;AAWA,WAAO,IAAP,EAAa;AACX,UAAI;AACF,eAAO,MAAMI,GAAG,CAACQ,EAAJ,CAAOC,MAAP,CAAcL,MAAM,CAACM,MAArB,CAAb;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV,YAAInB,IAAI,CAACC,GAAL,KAAaC,aAAjB,EAAgC;AAC9B,gBAAMR,KAAK,CAAC,GAAD,CAAX;AACD,SAFD,MAEO,IAAIM,IAAI,CAACC,GAAL,KAAaF,KAAjB,EAAwB;AAC7B,gBAAML,KAAK,CAAC,OAAO,EAAR,CAAX;AACD,SAFM,MAEA;AACL,gBAAM,IAAI0B,KAAJ,CACH,gFAA+ER,MAAM,CAACM,MAAO,EAD1F,CAAN;AAGD;AACF;AACF;AACF,GAjCD;AAAA,CADF,C,CAoCA;AACA;;;AACA,OAAO,MAAMG,QAAQ,GAAG,OAAOd,MAAP,EAAee,KAAf,KACtBnB,KAAK,CAAC;AAAEoB,EAAAA,YAAY,EAAE;AAAED,IAAAA;AAAF;AAAhB,CAAD,CAAL,CAAmCf,MAAnC,CADK","sourcesContent":["import { LCDClient, MsgExecuteContract, Fee } from \"@terra-money/terra.js\";\nimport { contractAddress } from \"./address\";\n\n// ==== utils ====\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst until = Date.now() + 1000 * 60 * 60;\nconst untilInterval = Date.now() + 1000 * 60;\n\nconst _exec =\n  (msg, fee = new Fee(200000, { uluna: 10000 })) =>\n  async (wallet) => {\n    const lcd = new LCDClient({\n      URL: wallet.network.lcd,\n      chainID: wallet.network.chainID,\n    });\n\n    const { result } = await wallet.post({\n      fee,\n      msgs: [\n        new MsgExecuteContract(\n          wallet.walletAddress,\n          contractAddress(wallet),\n          msg\n        ),\n      ],\n    });\n\n    while (true) {\n      try {\n        return await lcd.tx.txInfo(result.txhash);\n      } catch (e) {\n        if (Date.now() < untilInterval) {\n          await sleep(500);\n        } else if (Date.now() < until) {\n          await sleep(1000 * 10);\n        } else {\n          throw new Error(\n            `Transaction queued. To verify the status, please check the transaction hash: ${result.txhash}`\n          );\n        }\n      }\n    }\n  };\n\n// ==== execute contract ====\n// THIS IS ALL I ADDED!!!\nexport const setScore = async (wallet, score) =>\n  _exec({ upsert_score: { score } })(wallet);\n"]},"metadata":{},"sourceType":"module"}