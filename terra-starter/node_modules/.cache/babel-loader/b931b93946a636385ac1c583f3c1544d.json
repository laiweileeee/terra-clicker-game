{"ast":null,"code":"import { AccAddress } from '@terra-money/terra.js';\nimport { WalletStatus } from './types';\nexport function createConnectedWallet(_ref) {\n  let {\n    connection,\n    post,\n    sign,\n    signBytes,\n    supportFeatures,\n    wallets,\n    status,\n    network\n  } = _ref;\n\n  try {\n    if (status === WalletStatus.WALLET_CONNECTED && wallets.length > 0 && AccAddress.validate(wallets[0].terraAddress) && !!connection) {\n      const {\n        terraAddress,\n        connectType,\n        design\n      } = wallets[0];\n      return {\n        network,\n        terraAddress: terraAddress,\n        walletAddress: terraAddress,\n        design,\n        post: tx => {\n          return post(tx, terraAddress);\n        },\n        sign: tx => {\n          return sign(tx, terraAddress);\n        },\n        signBytes: bytes => {\n          return signBytes(bytes, terraAddress);\n        },\n        availablePost: supportFeatures.has('post'),\n        availableSign: supportFeatures.has('sign'),\n        availableSignBytes: supportFeatures.has('sign-bytes'),\n        connectType,\n        connection\n      };\n    } else {\n      return undefined;\n    }\n  } catch (_a) {\n    return undefined;\n  }\n}\nexport function createInstallableWallets(_ref2) {\n  let {\n    status,\n    installations\n  } = _ref2;\n\n  if (status === WalletStatus.WALLET_NOT_CONNECTED) {\n    return installations;\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../src/@terra-money/wallet-types/wallet.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA4C,uBAA5C;AACA,SASE,YATF,QAUO,SAVP;AA2CA,OAAM,SAAU,qBAAV,OASwB;AAAA,MATQ;AACpC,IAAA,UADoC;AAEpC,IAAA,IAFoC;AAGpC,IAAA,IAHoC;AAIpC,IAAA,SAJoC;AAKpC,IAAA,eALoC;AAMpC,IAAA,OANoC;AAOpC,IAAA,MAPoC;AAQpC,IAAA;AARoC,GASR;;AAC5B,MAAI;AACF,QACE,MAAM,KAAK,YAAY,CAAC,gBAAxB,IACA,OAAO,CAAC,MAAR,GAAiB,CADjB,IAEA,UAAU,CAAC,QAAX,CAAoB,OAAO,CAAC,CAAD,CAAP,CAAW,YAA/B,CAFA,IAGA,CAAC,CAAC,UAJJ,EAKE;AACA,YAAM;AAAE,QAAA,YAAF;AAAgB,QAAA,WAAhB;AAA6B,QAAA;AAA7B,UAAwC,OAAO,CAAC,CAAD,CAArD;AAEA,aAAO;AACL,QAAA,OADK;AAEL,QAAA,YAAY,EAAE,YAFT;AAGL,QAAA,aAAa,EAAE,YAHV;AAIL,QAAA,MAJK;AAKL,QAAA,IAAI,EAAG,EAAD,IAAwB;AAC5B,iBAAO,IAAI,CAAC,EAAD,EAAK,YAAL,CAAX;AACD,SAPI;AAQL,QAAA,IAAI,EAAG,EAAD,IAAwB;AAC5B,iBAAO,IAAI,CAAC,EAAD,EAAK,YAAL,CAAX;AACD,SAVI;AAWL,QAAA,SAAS,EAAG,KAAD,IAAkB;AAC3B,iBAAO,SAAS,CAAC,KAAD,EAAQ,YAAR,CAAhB;AACD,SAbI;AAcL,QAAA,aAAa,EAAE,eAAe,CAAC,GAAhB,CAAoB,MAApB,CAdV;AAeL,QAAA,aAAa,EAAE,eAAe,CAAC,GAAhB,CAAoB,MAApB,CAfV;AAgBL,QAAA,kBAAkB,EAAE,eAAe,CAAC,GAAhB,CAAoB,YAApB,CAhBf;AAiBL,QAAA,WAjBK;AAkBL,QAAA;AAlBK,OAAP;AAoBD,KA5BD,MA4BO;AACL,aAAO,SAAP;AACD;AACF,GAhCD,CAgCE,OAAA,EAAA,EAAM;AACN,WAAO,SAAP;AACD;AACF;AAOD,OAAM,SAAU,wBAAV,QAGqB;AAAA,MAHc;AACvC,IAAA,MADuC;AAEvC,IAAA;AAFuC,GAGd;;AACzB,MAAI,MAAM,KAAK,YAAY,CAAC,oBAA5B,EAAkD;AAChD,WAAO,aAAP;AACD;;AACD,SAAO,SAAP;AACD","sourcesContent":["import { AccAddress, CreateTxOptions } from '@terra-money/terra.js';\nimport {\n  Connection,\n  ConnectType,\n  Installation,\n  NetworkInfo,\n  SignBytesResult,\n  SignResult,\n  TxResult,\n  WalletInfo,\n  WalletStatus,\n} from './types';\n\ntype HumanAddr = string & { __type: 'HumanAddr' };\n\nexport interface ConnectedWallet {\n  network: NetworkInfo;\n  walletAddress: HumanAddr;\n  /** terraAddress is same as walletAddress */\n  terraAddress: HumanAddr;\n  design?: string;\n  post: (tx: CreateTxOptions) => Promise<TxResult>;\n  sign: (tx: CreateTxOptions) => Promise<SignResult>;\n  signBytes: (bytes: Buffer) => Promise<SignBytesResult>;\n  availablePost: boolean;\n  availableSign: boolean;\n  availableSignBytes: boolean;\n  connectType: ConnectType;\n  connection: Connection;\n}\n\ninterface CreateConnectedWalletParams {\n  status: WalletStatus;\n  network: NetworkInfo;\n  wallets: WalletInfo[];\n  connection: Connection | undefined;\n  post: (tx: CreateTxOptions, terraAddress?: string) => Promise<TxResult>;\n  sign: (tx: CreateTxOptions, terraAddress?: string) => Promise<SignResult>;\n  signBytes: (bytes: Buffer, terraAddress?: string) => Promise<SignBytesResult>;\n  supportFeatures: Set<\n    'post' | 'sign' | 'sign-bytes' | 'cw20-token' | 'network'\n  >;\n}\n\nexport function createConnectedWallet({\n  connection,\n  post,\n  sign,\n  signBytes,\n  supportFeatures,\n  wallets,\n  status,\n  network,\n}: CreateConnectedWalletParams): ConnectedWallet | undefined {\n  try {\n    if (\n      status === WalletStatus.WALLET_CONNECTED &&\n      wallets.length > 0 &&\n      AccAddress.validate(wallets[0].terraAddress) &&\n      !!connection\n    ) {\n      const { terraAddress, connectType, design } = wallets[0];\n\n      return {\n        network,\n        terraAddress: terraAddress as HumanAddr,\n        walletAddress: terraAddress as HumanAddr,\n        design,\n        post: (tx: CreateTxOptions) => {\n          return post(tx, terraAddress);\n        },\n        sign: (tx: CreateTxOptions) => {\n          return sign(tx, terraAddress);\n        },\n        signBytes: (bytes: Buffer) => {\n          return signBytes(bytes, terraAddress);\n        },\n        availablePost: supportFeatures.has('post'),\n        availableSign: supportFeatures.has('sign'),\n        availableSignBytes: supportFeatures.has('sign-bytes'),\n        connectType,\n        connection,\n      };\n    } else {\n      return undefined;\n    }\n  } catch {\n    return undefined;\n  }\n}\n\ninterface CreateInstallableWallets {\n  status: WalletStatus;\n  installations: Installation[];\n}\n\nexport function createInstallableWallets({\n  status,\n  installations,\n}: CreateInstallableWallets): Installation[] | undefined {\n  if (status === WalletStatus.WALLET_NOT_CONNECTED) {\n    return installations;\n  }\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}