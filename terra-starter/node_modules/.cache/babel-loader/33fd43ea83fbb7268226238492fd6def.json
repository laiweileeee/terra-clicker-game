{"ast":null,"code":"import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber, OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n  return operate(function (source, subscriber) {\n    var element;\n\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;\n    }\n\n    var groups = new Map();\n\n    var notify = function (cb) {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n\n    var handleError = function (err) {\n      return notify(function (consumer) {\n        return consumer.error(err);\n      });\n    };\n\n    var activeGroups = 0;\n    var teardownAttempted = false;\n    var groupBySourceSubscriber = new OperatorSubscriber(subscriber, function (value) {\n      try {\n        var key_1 = keySelector(value);\n        var group_1 = groups.get(key_1);\n\n        if (!group_1) {\n          groups.set(key_1, group_1 = connector ? connector() : new Subject());\n          var grouped = createGroupedObservable(key_1, group_1);\n          subscriber.next(grouped);\n\n          if (duration) {\n            var durationSubscriber_1 = createOperatorSubscriber(group_1, function () {\n              group_1.complete();\n              durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();\n            }, undefined, undefined, function () {\n              return groups.delete(key_1);\n            });\n            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));\n          }\n        }\n\n        group_1.next(element ? element(value) : value);\n      } catch (err) {\n        handleError(err);\n      }\n    }, function () {\n      return notify(function (consumer) {\n        return consumer.complete();\n      });\n    }, handleError, function () {\n      return groups.clear();\n    }, function () {\n      teardownAttempted = true;\n      return activeGroups === 0;\n    });\n    source.subscribe(groupBySourceSubscriber);\n\n    function createGroupedObservable(key, groupSubject) {\n      var result = new Observable(function (groupSubscriber) {\n        activeGroups++;\n        var innerSub = groupSubject.subscribe(groupSubscriber);\n        return function () {\n          innerSub.unsubscribe();\n          --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/groupBy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber, OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n    return operate(function (source, subscriber) {\n        var element;\n        if (!elementOrOptions || typeof elementOrOptions === 'function') {\n            element = elementOrOptions;\n        }\n        else {\n            (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);\n        }\n        var groups = new Map();\n        var notify = function (cb) {\n            groups.forEach(cb);\n            cb(subscriber);\n        };\n        var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };\n        var activeGroups = 0;\n        var teardownAttempted = false;\n        var groupBySourceSubscriber = new OperatorSubscriber(subscriber, function (value) {\n            try {\n                var key_1 = keySelector(value);\n                var group_1 = groups.get(key_1);\n                if (!group_1) {\n                    groups.set(key_1, (group_1 = connector ? connector() : new Subject()));\n                    var grouped = createGroupedObservable(key_1, group_1);\n                    subscriber.next(grouped);\n                    if (duration) {\n                        var durationSubscriber_1 = createOperatorSubscriber(group_1, function () {\n                            group_1.complete();\n                            durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();\n                        }, undefined, undefined, function () { return groups.delete(key_1); });\n                        groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));\n                    }\n                }\n                group_1.next(element ? element(value) : value);\n            }\n            catch (err) {\n                handleError(err);\n            }\n        }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); }, function () {\n            teardownAttempted = true;\n            return activeGroups === 0;\n        });\n        source.subscribe(groupBySourceSubscriber);\n        function createGroupedObservable(key, groupSubject) {\n            var result = new Observable(function (groupSubscriber) {\n                activeGroups++;\n                var innerSub = groupSubject.subscribe(groupSubscriber);\n                return function () {\n                    innerSub.unsubscribe();\n                    --activeGroups === 0 && teardownAttempted && groupBySourceSubscriber.unsubscribe();\n                };\n            });\n            result.key = key;\n            return result;\n        }\n    });\n}\n//# sourceMappingURL=groupBy.js.map"]},"metadata":{},"sourceType":"module"}