{"ast":null,"code":"import { WalletContext, WalletStatus } from '@terra-money/use-wallet';\nimport { WalletController } from '@terra-money/wallet-controller';\nimport React, { useEffect, useMemo, useState } from 'react';\nconst EMPTY_ARRAY = [];\nconst EMPTY_SUPPORT_FEATURES = new Set();\nexport function WalletProvider(_ref) {\n  let {\n    children,\n    defaultNetwork,\n    walletConnectChainIds,\n    connectorOpts,\n    pushServerOpts,\n    createReadonlyWalletSession,\n    selectExtension,\n    waitingChromeExtensionInstallCheck,\n    dangerously__chromeExtensionCompatibleBrowserCheck\n  } = _ref;\n  const [controller] = useState(() => new WalletController({\n    defaultNetwork,\n    walletConnectChainIds,\n    connectorOpts,\n    pushServerOpts,\n    createReadonlyWalletSession,\n    selectExtension,\n    waitingChromeExtensionInstallCheck,\n    dangerously__chromeExtensionCompatibleBrowserCheck\n  }));\n  const [availableConnectTypes, setAvailableConnectTypes] = useState(() => []);\n  const [availableInstallTypes, setAvailableInstallTypes] = useState(() => []);\n  const [availableConnections, setAvailableConnections] = useState(() => []);\n  const [availableInstallations, setAvailableInstallations] = useState(() => []);\n  const [states, setStates] = useState(() => ({\n    status: WalletStatus.INITIALIZING,\n    network: defaultNetwork\n  }));\n  useEffect(() => {\n    const availableConnectTypesSubscription = controller.availableConnectTypes().subscribe({\n      next: value => {\n        setAvailableConnectTypes(value);\n      }\n    });\n    const availableInstallTypesSubscription = controller.availableInstallTypes().subscribe({\n      next: value => {\n        setAvailableInstallTypes(value);\n      }\n    });\n    const availableConnectionsSubscription = controller.availableConnections().subscribe({\n      next: value => {\n        setAvailableConnections(value);\n      }\n    });\n    const availableInstallationsSubscription = controller.availableInstallations().subscribe({\n      next: value => {\n        setAvailableInstallations(value);\n      }\n    });\n    const statesSubscription = controller.states().subscribe({\n      next: value => {\n        setStates(value);\n      }\n    });\n    return () => {\n      availableConnectTypesSubscription.unsubscribe();\n      availableInstallTypesSubscription.unsubscribe();\n      availableConnectionsSubscription.unsubscribe();\n      availableInstallationsSubscription.unsubscribe();\n      statesSubscription.unsubscribe();\n    };\n  }, [controller]);\n  const state = useMemo(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      availableInstallations,\n      status: states.status,\n      network: states.network,\n      wallets: states.status === WalletStatus.WALLET_CONNECTED ? states.wallets : EMPTY_ARRAY,\n      install: controller.install,\n      connect: controller.connect,\n      connectReadonly: controller.connectReadonly,\n      disconnect: controller.disconnect,\n      connection: states.status === WalletStatus.WALLET_CONNECTED ? states.connection : undefined,\n      supportFeatures: states.status === WalletStatus.WALLET_CONNECTED ? states.supportFeatures : EMPTY_SUPPORT_FEATURES,\n      post: controller.post,\n      sign: controller.sign,\n      signBytes: controller.signBytes,\n      hasCW20Tokens: controller.hasCW20Tokens,\n      addCW20Tokens: controller.addCW20Tokens,\n      hasNetwork: controller.hasNetwork,\n      addNetwork: controller.addNetwork,\n      refetchStates: controller.refetchStates,\n      recheckStatus: controller.refetchStates,\n      isChromeExtensionCompatibleBrowser: controller.isChromeExtensionCompatibleBrowser\n    };\n  }, [availableConnectTypes, availableInstallTypes, availableConnections, availableInstallations, controller, states]);\n  return React.createElement(WalletContext.Provider, {\n    value: state\n  }, children);\n}","map":{"version":3,"sources":["../../../src/@terra-money/wallet-provider/WalletProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TerraWebExtensionFeatures } from '@terra-money/web-extension-interface';\nimport {\n  Connection,\n  ConnectType,\n  Installation,\n  Wallet,\n  WalletContext,\n  WalletInfo,\n  WalletStates,\n  WalletStatus,\n} from '@terra-money/use-wallet';\nimport {\n  WalletController,\n  WalletControllerOptions,\n} from '@terra-money/wallet-controller';\nimport React, { ReactNode, useEffect, useMemo, useState } from 'react';\n\nexport interface WalletProviderProps extends WalletControllerOptions {\n  children: ReactNode;\n}\n\nconst EMPTY_ARRAY: WalletInfo[] = [];\nconst EMPTY_SUPPORT_FEATURES = new Set<TerraWebExtensionFeatures>();\n\nexport function WalletProvider({\n  children,\n  defaultNetwork,\n  walletConnectChainIds,\n  connectorOpts,\n  pushServerOpts,\n  createReadonlyWalletSession,\n  selectExtension,\n  waitingChromeExtensionInstallCheck,\n  dangerously__chromeExtensionCompatibleBrowserCheck,\n}: WalletProviderProps) {\n  const [controller] = useState<WalletController>(\n    () =>\n      new WalletController({\n        defaultNetwork,\n        walletConnectChainIds,\n        connectorOpts,\n        pushServerOpts,\n        createReadonlyWalletSession,\n        selectExtension,\n        waitingChromeExtensionInstallCheck,\n        dangerously__chromeExtensionCompatibleBrowserCheck,\n      }),\n  );\n\n  const [availableConnectTypes, setAvailableConnectTypes] = useState<\n    ConnectType[]\n  >(() => []);\n\n  const [availableInstallTypes, setAvailableInstallTypes] = useState<\n    ConnectType[]\n  >(() => []);\n\n  const [availableConnections, setAvailableConnections] = useState<\n    Connection[]\n  >(() => []);\n\n  const [availableInstallations, setAvailableInstallations] = useState<\n    Installation[]\n  >(() => []);\n\n  const [states, setStates] = useState<WalletStates>(() => ({\n    status: WalletStatus.INITIALIZING,\n    network: defaultNetwork,\n  }));\n\n  useEffect(() => {\n    const availableConnectTypesSubscription = controller\n      .availableConnectTypes()\n      .subscribe({\n        next: (value) => {\n          setAvailableConnectTypes(value);\n        },\n      });\n\n    const availableInstallTypesSubscription = controller\n      .availableInstallTypes()\n      .subscribe({\n        next: (value) => {\n          setAvailableInstallTypes(value);\n        },\n      });\n\n    const availableConnectionsSubscription = controller\n      .availableConnections()\n      .subscribe({\n        next: (value) => {\n          setAvailableConnections(value);\n        },\n      });\n\n    const availableInstallationsSubscription = controller\n      .availableInstallations()\n      .subscribe({\n        next: (value) => {\n          setAvailableInstallations(value);\n        },\n      });\n\n    const statesSubscription = controller.states().subscribe({\n      next: (value) => {\n        setStates(value);\n      },\n    });\n\n    return () => {\n      availableConnectTypesSubscription.unsubscribe();\n      availableInstallTypesSubscription.unsubscribe();\n      availableConnectionsSubscription.unsubscribe();\n      availableInstallationsSubscription.unsubscribe();\n      statesSubscription.unsubscribe();\n    };\n  }, [controller]);\n\n  const state = useMemo<Wallet>(() => {\n    return {\n      availableConnectTypes,\n      availableInstallTypes,\n      availableConnections,\n      availableInstallations,\n      status: states.status,\n      network: states.network,\n      wallets:\n        states.status === WalletStatus.WALLET_CONNECTED\n          ? states.wallets\n          : EMPTY_ARRAY,\n      install: controller.install,\n      connect: controller.connect,\n      connectReadonly: controller.connectReadonly,\n      disconnect: controller.disconnect,\n      connection:\n        states.status === WalletStatus.WALLET_CONNECTED\n          ? states.connection\n          : undefined,\n      supportFeatures:\n        states.status === WalletStatus.WALLET_CONNECTED\n          ? states.supportFeatures\n          : EMPTY_SUPPORT_FEATURES,\n      post: controller.post,\n      sign: controller.sign,\n      signBytes: controller.signBytes,\n      hasCW20Tokens: controller.hasCW20Tokens,\n      addCW20Tokens: controller.addCW20Tokens,\n      hasNetwork: controller.hasNetwork,\n      addNetwork: controller.addNetwork,\n      refetchStates: controller.refetchStates,\n      recheckStatus: controller.refetchStates,\n      isChromeExtensionCompatibleBrowser:\n        controller.isChromeExtensionCompatibleBrowser,\n    };\n  }, [\n    availableConnectTypes,\n    availableInstallTypes,\n    availableConnections,\n    availableInstallations,\n    controller,\n    states,\n  ]);\n\n  return (\n    <WalletContext.Provider value={state}>{children}</WalletContext.Provider>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}